"use client"
import React from 'react'
import { useState,useEffect } from 'react'
import FieldAdder from './FieldAdder';
import { useParams } from 'next/navigation';

import firebase_app from './firebaseConfig';
import { getFirestore, doc, setDoc, addDoc, collection, updateDoc,getDoc, getDocs, query, where } from "firebase/firestore";
import { getStorage, ref, uploadString,uploadBytes ,getDownloadURL} from "firebase/storage";
import { Timestamp } from "firebase/firestore";
const db = getFirestore(firebase_app);
const storage = getStorage();


function CreatePublic() {

    const id = useParams()
    const [form, setForm] = useState({
          title: '',
            description: '',
            fields: []
    })
    const [formResponses, setFormResponses] = useState({});

    const getForm = async() => { 
        try {
        
            const q = query(collection(db, 'formulaire'), where("uuid", "==", id.id));
            const querySnapshot = await getDocs(q);

            if (!querySnapshot.empty) {
                // Get the auto-generated Firebase unique ID from the first document found
                const autoGeneratedId = querySnapshot.docs[0].id;

                // Delete the document using the auto-generated ID
                // await updateDoc(docRef, data);
                let docRef = doc(db, 'formulaire', autoGeneratedId)

                const res = await getDoc(docRef);
                setForm(res.data())
                console.log(res.data());
            }
        }
    catch (e: any) {
    console.log(e.message)
        }
    }
    const handleFieldChange = (fieldName, value) => {
    setFormResponses({
      ...formResponses,
      [fieldName]: value,
    });
    };
     
const handleSubmit = async () => {
  // Check if all required fields are filled
  const isFormValid = form.fields.every((field) => {
    // Check if the field is required and its value is not empty
    if (field.required) {
      return formResponses[field.label] !== undefined && formResponses[field.label] !== '';
    }
    return true; // Field is not required, so it's always considered valid
  });

  if (!isFormValid) {
    // Display an error message or prevent form submission
    alert('Please fill out all required fields.');
  } else {
    // Form is valid, proceed with submission
    try {
      const collectionRef = collection(db, 'resultatform');
      const result = await addDoc(collectionRef, { ...formResponses, 'id_form': id.id });
      window.location.href = "/success";
      console.log(result);
    } catch (e: any) {
      console.log(e.message);
    }
  }
};

    
    
    useEffect(() => { console.log(id.id); getForm()}, [id.id]);  

  return (
    <div className="flex justify-center align-items-center  flex-wrap w-[100%]  h-[100]   mb-4 mt-[60px]">
          <div className='col-6 bg-black md:ml-[100px]'>
               <div  className="flex justify-center align-items-center mt-[5%] w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
        <div className="relative w-full max-w-md max-h-full">
            {/* Modal content */}
            <div className="relative bg-white rounded-lg shadow dark:bg-gray-700">
        
                 <div className="px-6 py-6 lg:px-8">
                <h3 className="mb-4 text-3xl font-bold  text-gray-900 dark:text-white">{form.title}</h3>
                <h5 className='text-[13px] mb-3 border-b-4 p-4'>
                    {form.description}
                </h5>
                    
                 {form.fields.map((field, index) => (
                                                                                                                                                                                         <div key={index}>
                    <label className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">{field.label+"*"}</label>
                    {field.type === 'text' && (
                    <input className="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" type="text" id={index} value={formResponses[field.label] || ""}
                onChange={(e) => handleFieldChange(field.label, e.target.value)}/>
                    )}
                    {field.type === 'radio' && (
                    <div>
                        {field.options?.map((option, optionIndex) => (
                        <div key={optionIndex}>
                                <input className="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
                                    type="radio"
                                   id={optionIndex}
                                    name={field.label} 
                                    value={option}
                                    checked={formResponses[field.label] === option}
                                    onChange={(e) => handleFieldChange(field.label, e.target.value)}/>
                            <label className="block mb-2 text-sm font-medium text-gray-900 dark:text-white" htmlFor={option}>{option}</label>
                        </div>
                        ))}
                    </div>
                    )}
                    {field.type === 'select' && (
                   <select
                        id={index}
                        className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
                        value={formResponses[field.label] || ""} // Set the value to the selected option
                        onChange={(e) => handleFieldChange(field.label, e.target.value)} // Update the formResponses when the selection changes
                    >
                        <option value="">SÃ©lectionnez une option</option>
                        {field.options?.map((option, optionIndex) => (
                        <option key={optionIndex} value={option}>
                            {option}
                        </option>
                        ))}
                    </select>
                    )}
                    {field.type === 'checkbox' && (
                     <div>
                    {field.options?.map((option, optionIndex) => (
                            <div key={optionIndex}>
                                <input
                                className="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
                                type="checkbox"
                                id={optionIndex}
                                name={field.label} // Use the field label as the name
                                value={option}
                                checked={formResponses[field.label]?.includes(option)} // Check if the option is selected
                                onChange={(e) => handleCheckboxChange(field.label, option)} // Update the selected options
                                />
                                <label className="block mb-2 text-sm font-medium text-gray-900 dark:text-white" htmlFor={optionIndex}>
                                {option}
                                </label>
                            </div>
                            ))}
                        </div>
                        )}
                    {field.type === 'date' && (
                    <input type="date" id={index} className="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" value={formResponses[field.label] || ""}
                onChange={(e) => handleFieldChange(field.label, e.target.value)}/>
                    )}
                    {field.type === 'time' && (
                    <input type="time" id={index} className="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" value={formResponses[field.label] || ""}
                onChange={(e) => handleFieldChange(field.label, e.target.value)}/>
                    )}
                    {field.type === 'number' && (
                            <input type="number" id={index} className="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" value={formResponses[field.label] || ""}
                onChange={(e) => handleFieldChange(field.label, e.target.value)}/>
                        
                        )}
                    {field.type === 'textarea' && (
                        <textarea id={index} className="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" value={formResponses[field.label] || ""}
                onChange={(e) => handleFieldChange(field.label, e.target.value)}/>
                        )}
                        {field.type === 'email' && (
                        <input type="email" id={index} className="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" value={formResponses[field.label] || ""}
                onChange={(e) => handleFieldChange(field.label, e.target.value)}/>
                        )}
                        {field.type === 'tel' && (
                        <input type="tel" id={index} className="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" value={formResponses[field.label] || ""}
                onChange={(e) => handleFieldChange(field.label, e.target.value)}/>
                        )}
                </div>
                ))} 

               
        
                <button
                    className="w-full text-white bg-black hover:bg-green-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                    onClick={()=>{handleSubmit()}}
                    
                                  >
                    Envoyer
                </button>
                
             
            </div> 
            </div>
        </div>
        </div>
          </div>
    </div>
  )
}

export default CreatePublic